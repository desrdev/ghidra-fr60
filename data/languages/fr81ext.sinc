
# Additional instructions according to
# "FR81 32-bit microcontroller PROGRAMMING MANUAL"
# document number CM71-00105-1E (490 pages)


attach variables [ fri frj frk ] [ FR0 FR1 FR2 FR3 FR4 FR5 FR6 FR7 FR8 FR9 FR10 FR11 FR12 FR13 FR14 FR15 ];

# Floating point condition code flags
@define FCR_E "FCR[31,1]"	# equal
@define FCR_L "FCR[30,1]"	# less than
@define FCR_G "FCR[29,1]"	# greater than
@define FCR_U "FCR[28,1]"	# unordered - cannot compare



define pcodeop TODO;

Label21: addr is rel20hi ; rel20lo
[ addr = ((rel20hi << 17) | (rel20lo << 1)) + inst_next; ] {
	export *:4 addr; 
}
# LCALL Label21 (7.96)
:LCALL Label21 is op12=0x072... & Label21 {
	RP = inst_next;
	call Label21;
}
# LCALL:D label21 (7.97)
:LCALL^":D" Label21 is op12=0x172... & Label21 {
    delayslot(1);
	RP = inst_next + 2;
	call Label21;
}


# MOV Rj, FRi (7.131)
:MOV ri, fri is op12=0x073 & ri ; fri {
	fri = ri;
}
# MOV FRj, Ri (7.132)
:MOV fri, ri is op12=0x173 & ri ; fri {
	ri = fri;
}

# LD @(BP, udisp18), Ri (7.103)
:LD @(BP, udisp18), ri is op12=0x074 & ri ; u16 & BP
[ udisp18 = u16 * 4; ] {
	ri = *:4 (BP + udisp18);
}
# ST Ri, @(BP, udisp18) (7.154)
:ST ri, @(BP, udisp18) is op12=0x174 & ri ; u16 & BP
[ udisp18 = u16 * 4; ] {
	*:4 (BP + udisp18) = ri;
}

# LDUH @(BP, udisp17), Ri (7.118)
:LDUH @(BP, udisp17), ri is op12=0x075 & ri ; u16 & BP
[ udisp17 = u16 * 2; ] {
	ri = zext(*:2 (BP + udisp17));
}
# STH Ri, @(BP, udisp17) (7.164)
:STH ri, @(BP, udisp17) is op12=0x175 & ri ; u16 & BP
[ udisp17 = u16 * 2; ] {
	*:2 (BP + udisp17) = ri:2;
}

# LDUB @(BP, udisp16), Ri (7.144)
:LDUB @(BP, udisp16), ri is op12=0x076 & ri ; u16 & BP
[ udisp16 = u16 * 1; ] {
	ri = zext(*:1 (BP + udisp16));
}
# STUB Ri, @(BP, udisp16) (7.160)
:STUB ri, @(BP, udisp16) is op12=0x176 & ri ; u16 & BP
[ udisp16 = u16 * 1; ] {
	*:1 (BP + udisp16) = ri:1;
}

# FLD @(BP, udisp18), FRi (7.75)
:FLD @(BP, udisp18), fri is op12=0x077 & fri ; u16 & BP
[ udisp18 = u16 * 4; ] {
	fri = *:4 (BP + udisp18);
}
# FST FRi, @(BP, udisp18) (7.88)
:FST fri, @(BP, udisp18) is op12=0x177 & fri ; u16 & BP
[ udisp18 = u16 * 4; ] {
	*:4 (BP + udisp18) = fri;
}

# FLD @Rj, FRi (7.70)
:FLD @^ri, fri is op12=0x07C & ri ; fri {
	fri = *:4 ri;
}
# FST FRi, @Rj (7.83)
:FST fri, @^ri is op12=0x17C & ri ; fri {
	*:4 ri = fri;
}

# FLD @(R13, Rj), FRi (7.71)
:FLD @(ri, AC), fri is op12=0x07E & ri ; fri & AC {
	fri = *:4 (AC + ri);
}
# FST FRi, @(R13, Rj) (7.84)
:FST fri, @(AC, ri) is op12=0x17E & ri ; fri & AC {
	*:4 (AC + ri) = fri;
}

# FADDs FRk, FRj, FRi (7.64)
:FADDs frk, frj, fri is op16=0x07A0 ; fri & frj & frk {
	fri = frk f+ frj;
}

# FSUBs FRk, FRj, FRi (7.91)
:FSUBs frk, frj, fri is op16=0x07A2 ; fri & frj & frk {
	fri = frk f- frj;
}

# FCMPs FRk, FRj, FRi (7.67)
:FCMPs frk, frj is op16=0x07A4 ; frj & frk {
	local e:4 = zext(frk f== frj) << 31;
	local l:4 = zext(frk f< frj) << 30;
	local g:4 = zext(frk f> frj) << 29;
	local u:4 = zext(nan(frk) || nan(frj)) << 28;
	FCR = (FCR & 0x0fffffff) | e | l | g | u;
}

# FMADDs FRk, FRj, FRi (7.77)
:FMADDs frk, frj, fri is op16=0x07A5 ; fri & frj & frk {
	fri = frk f* frj f+ fri;
}

# FMSUBs FRk, FRj, FRi (7.79)
:FMSUBs frk, frj, fri is op16=0x07A6 ; fri & frj & frk {
	fri = frk f* frj f- fri;
}

# FMULs FRk, FRj, FRi (7.80)
:FMULs frk, frj, fri is op16=0x07A7 ; fri & frj & frk {
	fri = frk f* frj;
}

# FiTOs FRj, FRi (7.69)
:FMULs frj, fri is op16=0x07A8 ; fri & frj {
	fri = int2float(frj);
}

# FsTOi FRj, FRi (7.90)
:FMULs frj, fri is op16=0x07A9 ; fri & frj {
	fri = round(frj); # not sure how rounding works in this CPU
}

# FDIVs FRk, FRj, FRi (7.68)
:FDIVs frk, frj, fri is op16=0x07AA ; fri & frj & frk {
	fri = frk f/ frj;
}

# FSQRTs FRj, FRi (7.82)
:FSQRTs frj, fri is op16=0x07AB ; fri & frj {
	fri = sqrt(frj);
}

# FABSs FRj, FRi (7.63)
:FABSs frj, fri is op16=0x07AC ; fri & frj {
	fri = abs(frj);
}

# FMOVs FRj, FRi (7.78)
:FMOVs frj, fri is op16=0x07AE ; fri & frj {
	fri = frj;
}

# FNEGs FRj, FRi (7.81)
:FNEGs frj, fri is op16=0x07AF ; fri & frj {
	fri = 0 f- frj;
}


# FLD @(R14, disp16), FRi (7.72)
:FLD @(FP, disp16), fri is op14=(0x07D0>>2) & o14shi ; o14lo & fri & FP
[ disp16 = ((o14shi << 12) | o14lo) * 4; ] {
	fri = *:4 (FP + disp16);
}
# FST FRi, @(R14, disp16) (7.85)
:FST fri, @(FP, disp16) is op14=(0x17D0>>2) & o14shi ; o14lo & fri & FP
[ disp16 = ((o14shi << 12) | o14lo) * 4; ] {
	*:4 (FP + disp16) = fri;
}

# FLD @(R15, udisp16), FRi (7.73)
:FLD @(SP, udisp16), fri is op14=(0x07D4>>2) & o14uhi ; o14lo & fri & SP
[ udisp16 = ((o14uhi << 12) | o14lo) * 4; ] {
	fri = *:4 (SP + udisp16);
}
# FST FRi, @(R15, udisp16) (7.86)
:FST fri, @(SP, udisp16) is op14=(0x17D4>>2) & o14uhi ; o14lo & fri & SP
[ udisp16 = ((o14uhi << 12) | o14lo) * 4; ] {
	*:4 (SP + udisp16) = fri;
}

# FLD @R15+, FRi (7.74)
:FLD @SP+, fri is op14=(0x07D8>>2) ; fri & SP {
	fri = *:4 SP;
	SP = SP + 4;
}
# FST FRi, @-R15 (7.87)
:FST fri, @-SP is op14=(0x17D8>>2) ; fri & SP {
	SP = SP - 4;
	*:4 SP = fri;
}

# FLDM (frlist) (7.76)
:FLDM "(frlist)" is op14=(0x07DC>>2) ; stmrlist7 {
	TODO();
}
# FSTM (frlist) (7.89)
:FSTM "(frlist)" is op14=(0x17DC>>2) ; stmrlist7 {
	TODO();
}

FCC: "N"	is fcc=0x0 { local tmp:1 = 0; export tmp; }
FCC: "U"	is fcc=0x1 { local tmp:1 = $(FCR_U) != 0; export tmp; }
FCC: "G"	is fcc=0x2 { local tmp:1 = $(FCR_G) != 0; export tmp; }
FCC: "UG"	is fcc=0x3 { local tmp:1 = ($(FCR_U) | $(FCR_G)) != 0; export tmp; }
FCC: "L"	is fcc=0x4 { local tmp:1 = $(FCR_L) != 0; export tmp; }
FCC: "UL"	is fcc=0x5 { local tmp:1 = ($(FCR_U) | $(FCR_L)) != 0; export tmp; }
FCC: "LG"	is fcc=0x6 { local tmp:1 = ($(FCR_L) | $(FCR_G)) != 0; export tmp; }
FCC: "NE"	is fcc=0x7 { local tmp:1 = ($(FCR_L) | $(FCR_G) | $(FCR_U)) != 0; export tmp; }
FCC: "E"	is fcc=0x8 { local tmp:1 = $(FCR_E) != 0; export tmp; }
FCC: "UE"	is fcc=0x9 { local tmp:1 = ($(FCR_E) | $(FCR_U)) != 0; export tmp; }
FCC: "GE"	is fcc=0xA { local tmp:1 = ($(FCR_G) | $(FCR_E)) != 0; export tmp; }
FCC: "UGE"	is fcc=0xB { local tmp:1 = ($(FCR_U) | $(FCR_G) | $(FCR_E)) != 0; export tmp; }
FCC: "LE"	is fcc=0xC { local tmp:1 = ($(FCR_L) | $(FCR_E)) != 0; export tmp; }
FCC: "ULE" 	is fcc=0xD { local tmp:1 = ($(FCR_E) | $(FCR_L) | $(FCR_U)) != 0; export tmp; }
FCC: "O"	is fcc=0xE { local tmp:1 = ($(FCR_E) | $(FCR_L) | $(FCR_G)) != 0; export tmp; }
FCC: "A"	is fcc=0xF { local tmp:1 = 1; export tmp; }

Label17: addr is i16 [ addr = inst_next + (i16 * 2); ] { export *:1 addr; }

# FBcc label17 (7.65)
:FB^FCC Label17 is op12=0x07F & FCC ; Label17 {
    if (FCC) goto Label17;
}
# FBcc:D label17 (7.66)
:FB^FCC^":D" Label17 is op12=0x17F & FCC ; Label17 {
    delayslot(1);
    if (FCC) goto Label17;
}

