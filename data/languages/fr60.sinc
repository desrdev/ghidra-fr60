
define token instr (16)
    op16     = (0,15)
    op14     = (2,15)
    op12     = (4,15)
    op8      = (8,15)
    op7      = (9,15)
    op5      = (11,15)
    op4      = (12,15)

    cc       = (8,11)
    i8       = (4,11)
    o8       = (4,11) signed
    u5       = (4,8)
    s5       = (4,8) signed
    u4       = (4,7)
    i4       = (4,7) signed
    rj       = (4,7)
    rs4_4    = (4,7)

    rel11    = (0,10) signed
    u8       = (0,7)
    s8       = (0,7) signed
    rel8     = (0,7) signed
    dir8     = (0,7)

    stmrlist7 = (0,0)
    stmrlist6 = (1,1)
    stmrlist5 = (2,2)
    stmrlist4 = (3,3)
    stmrlist3 = (4,4)
    stmrlist2 = (5,5)
    stmrlist1 = (6,6)
    stmrlist0 = (7,7)
    stmrlist7N = (0,0)
    stmrlist6N = (0,1)
    stmrlist5N = (0,2)
    stmrlist4N = (0,3)
    stmrlist3N = (0,4)
    stmrlist2N = (0,5)
    stmrlist1N = (0,6)
    ldmrlist0 = (0,0)
    ldmrlist1 = (1,1)
    ldmrlist2 = (2,2)
    ldmrlist3 = (3,3)
    ldmrlist4 = (4,4)
    ldmrlist5 = (5,5)
    ldmrlist6 = (6,6)
    ldmrlist7 = (7,7)
    ldmrlist1N = (1,7)
    ldmrlist2N = (2,7)
    ldmrlist3N = (3,7)
    ldmrlist4N = (4,7)
    ldmrlist5N = (5,7)
    ldmrlist6N = (6,7)
    ldmrlist7N = (7,7)

    ccu4     = (0,3)
    ri       = (0,3)
    rs       = (0,3)
    i16      = (0,15)
    cri      = (0,3)
    crj      = (4,7)
    copcc    = (9,15)

@ifdef FR81_EXTENSION
    fri      = (0,3)
    frj      = (4,7)
    frk      = (8,11)

    fcc      = (0,3)

    rel20hi  = (0,3) signed
    rel20lo  = (0,15)
    o14shi   = (0,2) signed
    o14uhi   = (0,2) signed
    o14lo    = (4,15)
    u16      = (0,15)
@endif
;

define token instr32 (32)
    i32      = (0,31)
;

attach variables [ ri rj ] [ R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 AC FP SP ];

@ifndef FR81_EXTENSION
attach variables [ rs rs4_4 ] [ TBR RP SSP USP MDH MDL _ _ _ _ _ _ _ _ _ _ ];
@else
attach variables [ rs rs4_4 ] [ TBR RP SSP USP MDH MDL BP FCR ESR _ _ _ _ _ _ DBR ];
@endif

# ====

macro resultFlags(result) {
    N = (result s< 0);
    Z = (result == 0);
}

macro addFlags(result, val1, val2) {
    resultFlags(result);
    V = scarry(val1, val2);
    C = carry(val1, val2);
}

macro subFlags(result, val1, val2) {
    resultFlags(result);
    V = sborrow(val1, val2);
    C = (val1 < val2);
}

macro mulFlags64(val1, val2) {
    N = (MDL s< 0);
    Z = (MD == 0);
    V = (val1 != 0 && (val1 > (0xFFFFFFFFFFFFFFFF / val2)));
}

macro unpackCCR() {
    S = PS[5,1];
    I = PS[4,1];
    N = PS[3,1];
    Z = PS[2,1];
    V = PS[1,1];
    C = PS[0,1];
}

macro packCCR() {
    PS[0,1] = C;
    PS[1,1] = V;
    PS[2,1] = Z;
    PS[3,1] = N;
    PS[4,1] = I;
    PS[5,1] = S;
}

# Pack before an instruction reads from PS
macro packProgramStatus() {
    packCCR();
    PS[8,1] = T;
    PS[9,1] = D0;
    PS[10,1] = D1;
    PS[16,4] = ILM;
}

# Unpack after an instruction writes to PS
macro unpackProgramStatus() {
    ILM = PS[16,4];
    D1 = PS[10,1];
    D0 = PS[9,1];
    T = PS[8,1];
    unpackCCR();
}

# ====

define pcodeop _interrupt_prelude;
define pcodeop dma_write_chan;
define pcodeop dma_read_chan;

define pcodeop copop;
define pcodeop copld;
define pcodeop copst;
define pcodeop copsv;

define pcodeop clz;

# ====

bandl_ext: u4 is u4 {
    local value:1 = 0xf0 | u4;
    export value;
}

bandh_ext: u4 is u4 {
    local value:1 = 0x0f | (u4 << 4);
    export value;
}

REL: reloc is rel8 [ reloc = inst_next + (rel8 << 1); ] {
    export *:2 reloc;
}

REL_SEXT11: reloc is rel11 [ reloc = inst_next + (rel11 << 1); ] {
    export *:2 reloc;
}

DIR8_REL: reloc is dir8 [ reloc = dir8 << 2; ] {
    export *:4 reloc;
}

DIR8H_REL: reloc is dir8 [ reloc = dir8 << 1; ] {
    export *:2 reloc;
}

DIR8B_REL: reloc is dir8 [ reloc = dir8 * 1; ] {
    export *:1 reloc;
}

# If "R15" is specified in the parameter "stmrlist", the contents of "R15"
# retained before the instruction is executed will be written to memory
stm_r15:   SP          is SP & stmrlist7=1                          {              SP = SP - 4; *[ram]:4 SP = SP + 4; }
stm_r15:   ""          is epsilon                                   {                                                 }

stm_r14:   FP          is FP & stm_r15 & stmrlist6=1 & stmrlist7N=0  { build stm_r15; SP = SP - 4; *[ram]:4 SP = FP;  }
stm_r14:   FP,stm_r15  is FP & stm_r15 & stmrlist6=1                 { build stm_r15; SP = SP - 4; *[ram]:4 SP = FP;  }
stm_r14:   stm_r15     is stm_r15                                    { build stm_r15;                                 }

stm_r13:   AC          is AC & stm_r14 & stmrlist5=1 & stmrlist6N=0  { build stm_r14; SP = SP - 4; *[ram]:4 SP = AC;  }
stm_r13:   AC,stm_r14  is AC & stm_r14 & stmrlist5=1                 { build stm_r14; SP = SP - 4; *[ram]:4 SP = AC;  }
stm_r13:   stm_r14     is stm_r14                                    { build stm_r14;                                 }

stm_r12:   R12         is R12 & stm_r13 & stmrlist4=1 & stmrlist5N=0 { build stm_r13; SP = SP - 4; *[ram]:4 SP = R12; }
stm_r12:   R12,stm_r13 is R12 & stm_r13 & stmrlist4=1                { build stm_r13; SP = SP - 4; *[ram]:4 SP = R12; }
stm_r12:   stm_r13     is stm_r13                                    { build stm_r13;                                 }

stm_r11:   R11         is R11 & stm_r12 & stmrlist3=1 & stmrlist4N=0 { build stm_r12; SP = SP - 4; *[ram]:4 SP = R11; }
stm_r11:   R11,stm_r12 is R11 & stm_r12 & stmrlist3=1                { build stm_r12; SP = SP - 4; *[ram]:4 SP = R11; }
stm_r11:   stm_r12     is stm_r12                                    { build stm_r12;                                 }

stm_r10:   R10         is R10 & stm_r11 & stmrlist2=1 & stmrlist3N=0 { build stm_r11; SP = SP - 4; *[ram]:4 SP = R10; }
stm_r10:   R10,stm_r11 is R10 & stm_r11 & stmrlist2=1                { build stm_r11; SP = SP - 4; *[ram]:4 SP = R10; }
stm_r10:   stm_r11     is stm_r11                                    { build stm_r11;                                 }

stm_r9:    R9          is R9 & stm_r10 & stmrlist1=1 & stmrlist2N=0  { build stm_r10; SP = SP - 4; *[ram]:4 SP = R9;  }
stm_r9:    R9,stm_r10  is R9 & stm_r10 & stmrlist1=1                 { build stm_r10; SP = SP - 4; *[ram]:4 SP = R9;  }
stm_r9:    stm_r10     is stm_r10                                    { build stm_r10;                                 }

stm1_list: R8          is R8 & stm_r9 & stmrlist0=1 & stmrlist1N=0   { build stm_r9; SP = SP - 4; *[ram]:4 SP = R8;   }
stm1_list: R8,stm_r9   is R8 & stm_r9 & stmrlist0=1                  { build stm_r9; SP = SP - 4; *[ram]:4 SP = R8;   }
stm1_list: stm_r9      is stm_r9                                     { build stm_r9;                                  }


stm_r7:    R7          is R7 & stmrlist7=1                         {                SP = SP - 4; *[ram]:4 SP = R7; }
stm_r7:    ""          is epsilon                                  {                                               }

stm_r6:    R6          is R6 & stm_r7 & stmrlist6=1 & stmrlist7N=0 { build stm_r7; SP = SP - 4; *[ram]:4 SP = R6;  }
stm_r6:    R6,stm_r7   is R6 & stm_r7 & stmrlist6=1                { build stm_r7; SP = SP - 4; *[ram]:4 SP = R6;  }
stm_r6:    stm_r7      is stm_r7                                   { build stm_r7;                                 }

stm_r5:    R5          is R5 & stm_r6 & stmrlist5=1 & stmrlist6N=0 { build stm_r6; SP = SP - 4; *[ram]:4 SP = R5;  }
stm_r5:    R5,stm_r6  is R5 & stm_r6 & stmrlist5=1                 { build stm_r6; SP = SP - 4; *[ram]:4 SP = R5;  }
stm_r5:    stm_r6     is stm_r6                                    { build stm_r6;                                 }

stm_r4:    R4         is R4 & stm_r5 & stmrlist4=1 & stmrlist5N=0  { build stm_r5; SP = SP - 4; *[ram]:4 SP = R4;  }
stm_r4:    R4,stm_r5  is R4 & stm_r5 & stmrlist4=1                 { build stm_r5; SP = SP - 4; *[ram]:4 SP = R4;  }
stm_r4:    stm_r5     is stm_r5                                    { build stm_r5;                                 }

stm_r3:    R3         is R3 & stm_r4 & stmrlist3=1 & stmrlist4N=0  { build stm_r4; SP = SP - 4; *[ram]:4 SP = R3;  }
stm_r3:    R3,stm_r4  is R3 & stm_r4 & stmrlist3=1                 { build stm_r4; SP = SP - 4; *[ram]:4 SP = R3;  }
stm_r3:    stm_r4     is stm_r4                                    { build stm_r4;                                 }

stm_r2:    R2         is R2 & stm_r3 & stmrlist2=1 & stmrlist3N=0  { build stm_r3; SP = SP - 4; *[ram]:4 SP = R2;  }
stm_r2:    R2,stm_r3  is R2 & stm_r3 & stmrlist2=1                 { build stm_r3; SP = SP - 4; *[ram]:4 SP = R2;  }
stm_r2:    stm_r3     is stm_r3                                    { build stm_r3;                                 }

stm_r1:    R1          is R1 & stm_r2 & stmrlist1=1 & stmrlist2N=0 { build stm_r2;  SP = SP - 4; *[ram]:4 SP = R1; }
stm_r1:    R1,stm_r2   is R1 & stm_r2 & stmrlist1=1                { build stm_r2;  SP = SP - 4; *[ram]:4 SP = R1; }
stm_r1:    stm_r2      is stm_r2                                   { build stm_r2;                                 }

stm0_list: R0          is R0 & stm_r1 & stmrlist0=1 & stmrlist1N=0 { build stm_r1; SP = SP - 4; *[ram]:4 SP = R0;  }
stm0_list: R0,stm_r1   is R0 & stm_r1 & stmrlist0=1                { build stm_r1; SP = SP - 4; *[ram]:4 SP = R0;  }
stm0_list: stm_r1      is stm_r1                                   { build stm_r1;                                 }

# If "R15" is specified in the parameter "stmrlist", the final contents of "R15"
# will be readfrom memory
ldm_r15:   SP          is SP & ldmrlist7=1                           { SP = *[ram]:4 SP;                             }
ldm_r15:   ""          is epsilon                                    {                                               }

ldm_r14:   FP          is FP & ldm_r15 & ldmrlist6=1 & ldmrlist7N=0  { FP = *[ram]:4 SP; SP = SP + 4; build ldm_r15; }
ldm_r14:   FP,ldm_r15  is FP & ldm_r15 & ldmrlist6=1                 { FP = *[ram]:4 SP; SP = SP + 4; build ldm_r15; }
ldm_r14:   ldm_r15     is ldm_r15                                    {                                build ldm_r15; }

ldm_r13:   AC          is AC & ldm_r14 & ldmrlist5=1 & ldmrlist6N=0  { AC = *[ram]:4 SP; SP = SP + 4; build ldm_r14; }
ldm_r13:   AC,ldm_r14  is AC & ldm_r14 & ldmrlist5=1                 { AC = *[ram]:4 SP; SP = SP + 4; build ldm_r14; }
ldm_r13:   ldm_r14     is ldm_r14                                    {                                build ldm_r14; }

ldm_r12:   R12         is R12 & ldm_r13 & ldmrlist4=1 & ldmrlist5N=0 { R12 = *[ram]:4 SP; SP = SP + 4; build ldm_r13; }
ldm_r12:   R12,ldm_r13 is R12 & ldm_r13 & ldmrlist4=1                { R12 = *[ram]:4 SP; SP = SP + 4; build ldm_r13; }
ldm_r12:   ldm_r13     is ldm_r13                                    {                                 build ldm_r13; }

ldm_r11:   R11         is R11 & ldm_r12 & ldmrlist3=1 & ldmrlist4N=0 { R11 = *[ram]:4 SP; SP = SP + 4; build ldm_r12; }
ldm_r11:   R11,ldm_r12 is R11 & ldm_r12 & ldmrlist3=1                { R11 = *[ram]:4 SP; SP = SP + 4; build ldm_r12; }
ldm_r11:   ldm_r12     is ldm_r12                                    {                                 build ldm_r12; }

ldm_r10:   R10         is R10 & ldm_r11 & ldmrlist2=1 & ldmrlist3N=0 { R10 = *[ram]:4 SP; SP = SP + 4; build ldm_r11; }
ldm_r10:   R10,ldm_r11 is R10 & ldm_r11 & ldmrlist2=1                { R10 = *[ram]:4 SP; SP = SP + 4; build ldm_r11; }
ldm_r10:   ldm_r11     is ldm_r11                                    {                                 build ldm_r11; }

ldm_r9:    R9          is R9 & ldm_r10 & ldmrlist1=1 & ldmrlist2N=0{ R9 = *[ram]:4 SP;  SP = SP + 4; build ldm_r10; }
ldm_r9:    R9,ldm_r10  is R9 & ldm_r10 & ldmrlist1=1               { R9 = *[ram]:4 SP;  SP = SP + 4; build ldm_r10; }
ldm_r9:    ldm_r10     is ldm_r10                                  {                                 build ldm_r10; }

ldm1_list: R8          is R8 & ldm_r9 & ldmrlist0=1 & ldmrlist1N=0 { R8 = *[ram]:4 SP;   SP = SP + 4; build ldm_r9; }
ldm1_list: R8,ldm_r9   is R8 & ldm_r9 & ldmrlist0=1                { R8 = *[ram]:4 SP;   SP = SP + 4; build ldm_r9; }
ldm1_list: ldm_r9      is ldm_r9                                   {                                  build ldm_r9; }


ldm_r7:    R7          is R7 & ldmrlist7=1                         { R7 = *[ram]:4 SP; SP = SP + 4;                }
ldm_r7:    ""          is epsilon                                  {                                               }

ldm_r6:    R6          is R6 & ldm_r7 & ldmrlist6=1 & ldmrlist7N=0 { R6 = *[ram]:4 SP;  SP = SP + 4; build ldm_r7; }
ldm_r6:    R6,ldm_r7   is R6 & ldm_r7 & ldmrlist6=1                { R6 = *[ram]:4 SP;  SP = SP + 4; build ldm_r7; }
ldm_r6:    ldm_r7      is ldm_r7                                   {                                 build ldm_r7; }

ldm_r5:    R5          is R5 & ldm_r6 & ldmrlist5=1 & ldmrlist6N=0 { R5 = *[ram]:4 SP;  SP = SP + 4; build ldm_r6; }
ldm_r5:    R5,ldm_r6   is R5 & ldm_r6 & ldmrlist5=1                { R5 = *[ram]:4 SP;  SP = SP + 4; build ldm_r6; }
ldm_r5:    ldm_r6      is ldm_r6                                   {                                 build ldm_r6; }

ldm_r4:    R4          is R4 & ldm_r5 & ldmrlist4=1 & ldmrlist5N=0 { R4 = *[ram]:4 SP;  SP = SP + 4; build ldm_r5; }
ldm_r4:    R4,ldm_r5   is R4 & ldm_r5 & ldmrlist4=1                { R4 = *[ram]:4 SP;  SP = SP + 4; build ldm_r5; }
ldm_r4:    ldm_r5      is ldm_r5                                   {                                 build ldm_r5; }

ldm_r3:    R3          is R3 & ldm_r4 & ldmrlist3=1 & ldmrlist4N=0 { R3 = *[ram]:4 SP;  SP = SP + 4; build ldm_r4; }
ldm_r3:    R3,ldm_r4   is R3 & ldm_r4 & ldmrlist3=1                { R3 = *[ram]:4 SP;  SP = SP + 4; build ldm_r4; }
ldm_r3:    ldm_r4      is ldm_r4                                   {                                 build ldm_r4; }

ldm_r2:    R2          is R2 & ldm_r3 & ldmrlist2=1 & ldmrlist3N=0 { R2 = *[ram]:4 SP;  SP = SP + 4; build ldm_r3; }
ldm_r2:    R2,ldm_r3   is R2 & ldm_r3 & ldmrlist2=1                { R2 = *[ram]:4 SP;  SP = SP + 4; build ldm_r3; }
ldm_r2:    ldm_r3      is ldm_r3                                   {                                 build ldm_r3; }

ldm_r1:    R1          is R1 & ldm_r2 & ldmrlist1=1 & ldmrlist2N=0 {  R1 = *[ram]:4 SP; SP = SP + 4; build ldm_r2; }
ldm_r1:    R1,ldm_r2   is R1 & ldm_r2 & ldmrlist1=1                {  R1 = *[ram]:4 SP; SP = SP + 4; build ldm_r2; }
ldm_r1:    ldm_r2      is ldm_r2                                   {                                 build ldm_r2; }

ldm0_list: R0          is R0 & ldm_r1 & ldmrlist0=1 & ldmrlist1N=0 { R0 = *[ram]:4 SP;  SP = SP + 4; build ldm_r1; }
ldm0_list: R0,ldm_r1   is R0 & ldm_r1 & ldmrlist0=1                { R0 = *[ram]:4 SP;  SP = SP + 4; build ldm_r1; }
ldm0_list: ldm_r1      is ldm_r1                                   {                                 build ldm_r1; }


CC: "RA" is cc=0x0 { local tmp:1 = 1; export tmp; }
CC: "NO" is cc=0x1 { local tmp:1 = 0; export tmp; }
CC: "EQ" is cc=0x2 { local tmp:1 = (Z != 0); export tmp; }
CC: "NE" is cc=0x3 { local tmp:1 = (Z == 0); export tmp; }
CC: "C"  is cc=0x4 { local tmp:1 = (C != 0); export tmp; }
CC: "NC" is cc=0x5 { local tmp:1 = (C == 0); export tmp; }
CC: "N"  is cc=0x6 { local tmp:1 = (N != 0); export tmp; }
CC: "P"  is cc=0x7 { local tmp:1 = (N == 0); export tmp; }
CC: "V"  is cc=0x8 { local tmp:1 = (V != 0); export tmp; }
CC: "NV" is cc=0x9 { local tmp:1 = (V == 0); export tmp; }
CC: "LT" is cc=0xA { local tmp:1 = ((V != N) != 0); export tmp; }
CC: "GE" is cc=0xB { local tmp:1 = ((V != N) == 0); export tmp; }
CC: "LE" is cc=0xC { local tmp:1 = (((V != N) | Z) != 0); export tmp; }
CC: "GT" is cc=0xD { local tmp:1 = (((V != N) | Z) == 0); export tmp; }
CC: "LS" is cc=0xE { local tmp:1 = ((C | Z) != 0); export tmp; }
CC: "HI" is cc=0xF { local tmp:1 = ((C | Z) == 0); export tmp; }


# ====

# ADD Rj, Ri A A6 1 CCCC Ri + Rj --> Ri
:ADD rj, ri is op8=0xa6 & rj & ri {
    local res:4 = ri + rj;
    addFlags(res, ri, rj);
    ri = res;
}

# ADD #s5, Ri C’ A4 1 CCCC Ri + s5 --> Ri
:ADD #s5, ri is op7=0x52 & s5 & ri {
	local res:4 = ri + s5;
	addFlags(res, ri, s5);
	ri = res;
}

# ADD #u4, Ri C A4 1 CCCC Ri + extu(i4) --> Ri (zero extension)
:ADD #u4, ri is op8=0xa4 & u4 & ri {
    local res:4 = ri + u4;
    addFlags(res, ri, u4);
    ri = res;
}

# ADD2 #u4, Ri C A5 1 CCCC Ri + extu(i4) --> Ri  (minus extension)
:ADD2 #i4, ri is op8=0xa5 & i4 & ri {
    local res:4 = ri + i4;
    addFlags(res, ri, i4);
    ri = res;
}

# ADDC Rj, Ri A A7 1 CCCC Ri + Rj + c --> Ri (addition with carry)
:ADDC rj, ri is op8=0xa7 & rj & ri {
    local res:4 = ri + rj + zext(C:1);
    addFlags(res, ri, (rj + zext(C:1)));
    ri = res;
}

# ADDN Rj, Ri A A2 1 ---- Ri + Rj --> Ri
:ADDN rj, ri is op8=0xa2 & rj & ri {
    ri = ri + rj;
}

# ADDN #s5, Ri C’ A0 1 ---- Ri + s5 --> Ri
:ADDN #s5, ri is op7=0x50 & s5 & ri {
    ri = s5 + ri;
}

# ADDN #u4, Ri C A0 1 ---- Ri + extu(i4) --> Ri (zero extension)
:ADDN #u4, ri is op8=0xa0 & u4 & ri {
    ri = ri + u4;
}

# ADDN2 #u4, Ri C A1 1 ---- Ri + extu(i4) --> Ri (minux extension)
:ADDN2 #i4, ri is op8=0xa1 & i4 & ri {
    ri = ri + i4;
}

# ====

# SUB Rj, Ri A AC 1 CCCC Ri - Rj --> Ri
:SUB rj, ri is op8=0xac & rj & ri {
    local res:4 = ri - rj;
    subFlags(res, ri, rj);
    ri = res;
}

# SUBC Rj, Ri A AD 1 CCCC Ri - Rj - c --> Ri (addition with carry)
:SUBC rj, ri is op8=0xad & rj & ri {
    local res:4 = ri - rj - zext(C);
    subFlags(res, ri, (rj - zext(C)));
    ri = res;
}

# SUBN Rj, Ri A AE 1 ---- Ri - Rj --> Ri
:SUBN rj, ri is op8=0xae & rj & ri {
    ri = ri - rj;
}

# ====

# CMP Rj, Ri A AA 1 CCCC Ri - R
:CMP rj, ri is op8=0xaa & rj & ri {
    local res:4 = ri - rj;
    subFlags(res, ri, rj);
}

# CMP #s5, Ri C’ A8 1 CCCC Ri - s5
:CMP #s5, ri is op7=0x54 & s5 & ri {
    local res:4 = ri - s5;
    subFlags(res, ri, s5);
}

# CMP #u4, Ri C A8 1 CCCC Ri - extu(i4) (zero extension)
:CMP #u4, ri is op8=0xa8 & u4 & ri {
    local res:4 = ri - u4;
    subFlags(res, ri, u4);
}

# CMP2 #u4, Ri C A9 1 CCCC Ri - extu(i4) Minus extension
:CMP2 #i4, ri is op8=0xa9 & i4 & ri {
    res:4 = ri - i4;
    subFlags(res, ri, i4);
}

# ====

# AND Rj, Ri A 82 1 CC-- Ri &= Rj  Word
:AND rj, ri is op8=0x82 & rj & ri {
    ri = ri & rj;
    resultFlags(ri);
}

# AND Rj, @Ri A 84 1+2a CC-- (Ri) &= Rj  Word
:AND rj, @ri is op8=0x84 & rj & ri {
    local res:4 = *:4 ri & rj;
    resultFlags(res);
    *:4 ri = res;
}

# ANDH Rj, @Ri A 85 1+2a CC-- (Ri) &= Rj  Halfword
:ANDH rj, @ri is op8=0x85 & rj & ri {
    local res:2 = *:2 ri & rj:2;
    resultFlags(res);
    *:2 ri = res;
}

# ANDB Rj, @Ri A 86 1+2a CC-- (Ri) &= Rj  Byte
:ANDB rj, @ri is op8=0x86 & rj & ri {
    local res:1 = *:1 ri & rj:1;
    resultFlags(res);
    *:1 ri = res;
}

# ====

# OR Rj, Ri A 92 1 CC-- Ri | = Rj  Word
:OR rj, ri is op8=0x92 & rj & ri {
    ri = ri | rj;
    resultFlags(ri);
}

# OR Rj, @Ri A 94 1+2a CC-- (Ri) | = Rj  Word
:OR rj, @ri is op8=0x94 & rj & ri {
    local res:4 = *:4 ri | rj;
    resultFlags(res);
    *:4 ri = res;
}

# ORH Rj, @Ri A 95 1+2a CC-- (Ri) | = Rj  Halfword
:ORH rj, @ri is op8=0x95 & rj & ri {
    local res:2 = *:2 ri | rj:2;
    resultFlags(res);
    *:2 ri = res;
}

# ORB Rj, @Ri A 96 1+2a CC-- (Ri) | = Rj  Byte
:ORB rj, @ri is op8=0x96 & rj & ri {
    local res:1 = *:1 ri | rj:1;
    resultFlags(res);
    *:1 ri = res;
}

# ====

# EOR Rj, Ri A 9A 1 CC-- Ri ^ = Rj  Word
:EOR rj, ri is op8=0x9a & rj & ri {
    ri = ri ^ rj;
    resultFlags(ri);
}

# EOR Rj, @Ri A 9C 1+2a CC-- (Ri) ^ = Rj  Word
:EOR rj, @ri is op8=0x9c & rj & ri {
    local res:4 = *:4 ri ^ rj;
    resultFlags(res);
    *:4 ri = res;
}

# EORH Rj, @Ri A 9D 1+2a CC-- (Ri) ^ = Rj  Halfword
:EORH rj, @ri is op8=0x9d & rj & ri {
    local res:2 = *:2 ri ^ rj:2;
    resultFlags(res);
    *:2 ri = res;
}

# EORB Rj, @Ri A 9E 1+2a CC-- (Ri) ^ = Rj  Byte
:EORB rj, @ri is op8=0x9e & rj & ri {
    local res:1 = *:1 ri ^ rj:1;
    resultFlags(res);
    *:1 ri = res;
}

# ====

# BANDL #u4, @Ri C 80 1+2a ---- (Ri)&=(0xF0+u4)
:BANDL #bandl_ext, @ri is op8=0x80 & bandl_ext & ri {
    *:1 ri = bandl_ext & *:1 ri;
}

# BANDH #u4, @Ri C 81 1+2a ---- (Ri)&=((u4<<4)+0x0F)
:BANDH #bandh_ext, @ri is op8=0x81 & bandh_ext & ri {
    *:1 ri = bandh_ext & *:1 ri;
}

# ====

# BORL #u4, @Ri C 90 1+2a ---- (Ri) | = u4
:BORL #u4, @ri is op8=0x90 & u4 & ri {
    *:1 ri = u4:1 | *:1 ri;
}

# BORLH #u4, @Ri C 91 1+2a ---- (Ri) | = (u4<<4)
:BORH #u4, @ri is op8=0x91 & u4 & ri {
    *:1 ri = (u4:1 << 4) | *:1 ri;
}

# ====

# BEORL #u4, @Ri C 98 1+2a ---- (Ri) ^ = u4
:BEORL #u4, @ri is op8=0x98 & u4 & ri {
    *:1 ri = u4:1 ^ *:1 ri;
}

# BEORH #u4, @Ri C 99 1+2a ---- (Ri) ^ = (u4<<4)
:BEORH #u4, @ri is op8=0x99 & u4 & ri {
    *:1 ri = (u4:1 << 4) ^ *:1 ri;
}

# ====

# BTSTL #u4, @Ri C 88 2+a 0C-- (Ri) & u4
:BTSTL #u4, @ri is op8=0x88 & u4 & ri {
    local res:1 = u4:1 & *:1 ri;
    resultFlags(res);
}

# BTSTH #u4, @Ri C 89 2+a CC-- (Ri) & (u4<<4)
:BTSTH #u4, @ri is op8=0x89 & u4 & ri {
    local res:1 = (u4:1 << 4) & *:1 ri;
    resultFlags(res);
}

# ====

# MUL Rj,Ri A AF 5 CCC- Ri x Rj --> MDH,MDL
:MUL rj, ri is op8=0xaf & rj & ri {
    local full:8 = sext(rj) * sext(ri);
    MDL = full:4;
    MDH = full(4);
    mulFlags64(rj, ri);
}

# MULU Rj,Ri A AB 5 CCC- Ri x Rj --> MDH,MDL
:MULU rj, ri is op8=0xab & rj & ri {
    local full:8 = zext(rj) * zext(ri);
    MDL = full:4;
    MDH = full(4);
    mulFlags64(rj, ri);
}

# MULH Rj,Ri A BF 3 CC-- Ri x Rj --> MDL
:MULH rj, ri is op8=0xbf & rj & ri {
    MDL = sext(rj:2) * sext(ri:2);
    resultFlags(MDL);
}

# MULUH Rj,Ri A BB 3 CC-- Ri x Rj --> MDL
:MULUH rj, ri is op8=0xbb & rj & ri {
    MDL = zext(rj:2) * zext(ri:2);
    resultFlags(MDL);
}

# ====

# DIV0S Ri E 97-4 1 ---- Step operation
:DIV0S ri is op12=0x974 & ri {
    D0 = MDL s< 0;
    D1 = D0 && (ri s< 0);
    local ext64:8 = sext(MDL);
    MDL = ext64:4;
    MDH = ext64(4);
}

# DIV0U Ri E 97-5 1 ---- 32bits/32bits=32bits
:DIV0U ri is op12=0x975 & ri {
    D0 = 0;
    D1 = 0;
    MDH = 0x00000000;
}

# DIV1 Ri E 97-6 d -C-C
:DIV1 ri is op12=0x976 & ri {
    MD = MD << 1;

    local temp:4 = 0;
    if (D1 == 0) goto <D1_ZERO_OP>;
        temp = MDH + ri;
        C = carry(MDH, ri);
        goto <D1_OP>;
    <D1_ZERO_OP>
        temp = MDH - ri;
        C = MDH < ri;
    <D1_OP>

    if (D0 ^ D1 ^ C != 0) goto <END>;
        MDH = temp;
        MDL = MDL | 0x1;
    <END>

    Z = MDH == 0;
}

# DIV2 Ri E 97-7 1 -C-C
:DIV2 ri is op12=0x977 & ri {
    if (D1 == 0) goto <D1_ZERO_OP2>;
        C = carry(MDH, ri);
        Z = (MDH + ri) == 0;
        goto <D1_OP2>;
    <D1_ZERO_OP2>
        C = MDH < ri;
        Z = (MDH - ri) == 0;
    <D1_OP2>

    if (Z != 1) goto <END>;
        MDH = 0x00000000;
    <END>
    Z = MDH == 0;
}

# DIV3 E 9F-6 1 ----
:DIV3 is op16=0x9f60 & ri {
    if (Z != 1) goto <END>;
        MDL = MDL + 0x1;
    <END>
}

# DIV4S E 9F-7 1 ----
:DIV4S is op16=0x9f70 & ri {
    if (D1 != 1) goto <END>;
        MDL = 0 - MDL;
    <END>
}

# ====

# LSL Rj, Ri A B6 1 CC-C Ri << Rj --> Ri
:LSL rj, ri is op8=0xb6 & rj & ri {
    local shiftAmount = rj & 0x1f;
    C = ((ri << shiftAmount -1) & 0x80000000) != 0;
    ri = ri << shiftAmount;
    resultFlags(ri);
}

# LSL #u5, Ri (u5:0 to 31) C' B4 1 CC-C Ri << u5 --> Ri
:LSL #u5, ri is op7=0x5A & u5 & ri {
    local shiftAmount = u5;
    C = ((ri << shiftAmount -1) & 0x80000000) != 0;
    ri = ri << shiftAmount;
    resultFlags(ri);
}

# LSL #u4, Ri C B4 1 CC-C Ri << u4 --> Ri
:LSL #u4, ri is op8=0xb4 & u4 & ri {
    local shiftAmount = u4;
    C = ((ri << shiftAmount -1) & 0x80000000) != 0;
    ri = ri << shiftAmount;
    resultFlags(ri);
}

# LSL2 #u4, Ri C B5 1 CC-C Ri <<(u4+16) --> Ri
:LSL2 #u4_imm, ri is op8=0xb5 & u4 & ri [ u4_imm = u4 + 16; ] {
    C = ((ri << u4_imm -1) & 0x80000000) != 0;
    ri = ri << u4_imm;
    resultFlags(ri);
}

# ====

# LSR Rj, Ri A B2 1 CC-C Ri >> Rj --> Ri
:LSR rj, ri is op8=0xb2 & rj & ri {
    local shiftAmount = rj & 0x1f;
    C = ((ri >> shiftAmount -1) & 0x1) != 0;
    ri = ri >> shiftAmount;
    resultFlags(ri);
}

#LSR #u5, Ri (u5:0 to 31) C' B0 1 CC-C Ri >> u5 --> Ri
:LSR #u5, ri is op7=0x58 & u5 & ri {
    local shiftAmount = u5;
    C = ((ri >> shiftAmount -1) & 0x1) != 0;
    ri = ri >> shiftAmount;
    resultFlags(ri);
}

#LSR #u4, Ri C B0 1 CC-C Ri >> u4 --> Ri
:LSR #u4, ri is op8=0xb0 & u4 & ri {
    local shiftAmount = u4;
    C = ((ri >> shiftAmount -1) & 0x1) != 0;
    ri = ri >> shiftAmount;
    resultFlags(ri);
}

#LSR2 #u4, Ri C B1 1 CC-C Ri >>(u4+16) --> Ri
:LSR2 #u4_imm, ri is op8=0xb1 & u4 & ri [ u4_imm = u4 + 16; ] {
    C = ((ri >> u4_imm -1) & 0x1) != 0;
    ri = ri >> u4_imm;
    resultFlags(ri);
}

# ====

#ASR Rj, Ri A BA 1 CC-C Ri >> Rj --> Ri
:ASR rj, ri is op8=0xba & rj & ri {
    local shiftAmount = rj & 0x1f;
    C = ((ri s>> shiftAmount -1) & 0x1) != 0;
    ri = ri s>> shiftAmount;
    resultFlags(ri);
}

#ASR #u5, Ri (u5:0 to 31) C' B8 1 CC-C Ri >> u5 --> Ri
:ASR #u5, ri is op7=0x5C & u5 & ri {
    local shiftAmount = u5;
    C = ((ri s>> shiftAmount -1) & 0x1) != 0;
    ri = ri s>> shiftAmount;
    resultFlags(ri);
}

#ASR #u4, Ri C B8 1 CC-C Ri >> u4 --> Ri
:ASR #u4, ri is op8=0xb8 & u4 & ri {
    local shiftAmount = u4;
    C = ((ri s>> shiftAmount -1) & 0x1) != 0;
    ri = ri s>> shiftAmount;
    resultFlags(ri);
}

#ASR2 #u4, Ri C B9 1 CC-C Ri >>(u4+16) --> Ri
:ASR2 #u4_imm, ri is op8=0xb9 & u4 & ri [ u4_imm = u4 + 16; ] {
    C = ((ri >> u4_imm -1) & 0x1) != 0;
    ri = ri >> u4_imm;
    resultFlags(ri);
}

# ====

# LDI:32 #i32, Ri E 9F-8 3 ---- i32 --> Ri
:LDI^":32" #i32, ri is op12=0x9f8 & ri ; i32 {
    ri = i32;
}

# LDI:20 #i20, Ri C 9B 2 ---- i20 --> Ri
:LDI^":20" #i20, ri is op8=0x9b & ri & u4; i16 [ i20 = (u4 << 16) + i16; ] {
    ri = i20;
}

# LDI:8 #i8, Ri B C0 1 ---- i8 --> Ri
:LDI^":8" #i8, ri is op4=0xc & i8 & ri {
    ri = i8;
}

# ====

# LD @Rj, Ri A 04 b ---- (Rj) --> Ri
:LD @rj, ri is op8=0x04 & rj & ri {
    ri = *:4 rj;
}

# LD @(R13,Rj), Ri A 00 b ---- (R13+Rj) --> Ri
:LD @(AC, rj), ri is op8=0x00 & rj & ri & AC {
    ri = *:4 (AC + rj);
}

# LD @(R14,disp10), Ri B 20 b ---- (R14+disp10) --> Ri
:LD @(FP, o8_imm), ri is op4=0x2 & o8 & ri & FP [ o8_imm = o8 << 2; ]{
    ri = *:4 (FP + o8_imm);
}

# LD @(R15,udisp6), Ri C 03 b ---- (R15+udisp6) --> Ri
:LD @(SP, u4_imm), ri is op8=0x03 & u4 & ri & SP [ u4_imm = u4 << 2; ] {
    ri = *:4 (SP + u4_imm);
}

# LD @R15+, Ri E 07-0 b ---- (R15) --> Ri,R15+=4
:LD @SP+, ri is op12=0x070 & ri & SP {
    ri = *:4 SP;
    SP = SP + 4;
}

# LD @R15+, Rs E 07-8 b ---- (R15) --> Rs, R15+=4
:LD @SP+, rs is op12=0x078 & rs & SP {
    rs = *:4 SP;
    SP = SP + 4;
}

# LD @R15+, PS E 07-9 1+a+b CCCC (R15) --> PS, R15+=4
:LD @SP+, PS is op16=0x0790 & SP & PS {
    PS = *:4 SP;
    unpackProgramStatus();
    SP = SP + 4;
}

# ====

# LDUH @Rj, Ri A 05 b ---- (Rj) -->Ri Zero extension
:LDUH @rj, ri is op8=0x05 & rj & ri {
    ri = zext(*:2 rj);
}

# LDUH @(R13,Rj), Ri A 01 b ---- (R13+Rj) -->Ri Zero extension
:LDUH @(AC, rj), ri is op8=0x01 & rj & ri & AC {
    ri = zext(*:2 (AC + rj));
}

# LDUH @(R14,disp9), Ri B 40 b ---- (R14+disp9) -->Ri Zero extension
:LDUH @(FP, o8_imm), ri is op4=0x4 & o8 & ri & FP [ o8_imm = o8 << 1; ] {
    ri = zext(*:2 (FP + o8_imm));
}

# ====

# LDUB @Rj, Ri A 06 b ---- (Rj) -->Ri Zero extension
:LDUB @rj, ri is op8=0x06 & rj & ri {
    ri = zext(*:1 rj);
}

# LDUB @(R13,Rj), Ri A 02 b ---- (R13+Rj) -->Ri Zero extension
:LDUB @(AC, rj), ri is op8=0x02 & rj & ri & AC {
    ri = zext(*:1 (AC + rj));
}

# LDUB @(R14,disp8), Ri B 60 b ---- (R14+disp8) -->Ri Zero extension
:LDUB @(FP, o8), ri is op4=0x6 & o8 & ri & FP {
    ri = zext(*:1 (FP + o8));
}

# ====

# ST Ri, @Rj A 14 a ---- Ri --> (Rj)
:ST ri, @rj is op8=0x14 & rj & ri {
    *:4 rj = ri;
}

# ST Ri, @(R13,Rj) A 10 a ---- Ri --> (R13+Rj)
:ST ri, @(AC, rj) is op8=0x10 & rj & ri & AC {
    *:4 (AC + rj) = ri;
}

# ST Ri, @(R14,disp10) B 30 a ---- Ri --> (R14+disp10)
:ST ri, @(FP, o8_imm) is op4=0x3 & o8 & ri & FP [ o8_imm = o8 << 2; ] {
    *:4 (FP + o8_imm) = ri;
}

# ST Ri, @(R15,udisp6) C 13 a ---- Ri --> (R15+udisp6)
:ST ri, @(SP, u4_imm) is op8=0x13 & u4 & ri & SP [ u4_imm = u4 << 2; ] {
    *:4 (SP + u4_imm) = ri;
}

# ST Ri, @-R15 E 17-0 a ---- R15-=4,Ri --> (R15)
:ST ri, @-SP is op12=0x170 & ri & SP {
    SP = SP - 4;
    *:4 SP = ri;
}

# ST Rs, @-R15 E 17-8 a ---- R15-=4, Rs --> (R15)
:ST rs, @-SP is op12=0x178 & rs & SP {
    SP = SP - 4;
    *:4 SP = rs;
}

# ST PS, @-R15 E 17-9 a ---- R15-=4, PS --> (R15)
:ST PS, @-SP is op16=0x1790 & SP & PS {
    SP = SP - 4;
    packProgramStatus();
    *:4 SP = PS;
}

# ====

# STH Ri, @Rj A 15 a ---- Ri --> (Rj)
:STH ri, @rj is op8=0x15 & rj & ri {
    *:2 rj = ri:2;
}

# STH Ri, @(R13,Rj) A 11 a ---- Ri --> (R13+Rj)
:STH ri, @(AC, rj) is op8=0x11 & rj & ri & AC {
    *:2 (AC + rj) = ri:2;
}

# STH Ri, @(R14,disp9) B 50 a ---- Ri --> (R14+disp9)
:STH ri, @(FP, o8imm) is op4=0x5 & o8 & ri & FP [ o8imm = o8 << 1; ] {
    *:2 (FP + o8imm) = ri:2;
}

# ====

# STB Ri, @Rj A 16 a ---- Ri --> (Rj)
:STB ri, @rj is op8=0x16 & rj & ri {
    *:1 rj = ri:1;
}

# STB Ri, @(R13,Rj) A 12 a ---- Ri --> (R13+Rj)
:STB ri, @(AC, rj) is op8=0x12 & rj & ri & AC {
    *:1 (AC + rj) = ri:1;
}

# STB Ri, @(R14,disp8) B 70 a ---- Ri --> (R14+disp8)
:STB ri, @(FP, o8) is op4=0x7 & o8 & ri & FP {
    *:1 (FP + o8) = ri:1;
}

# ====

# MOV Rj, Ri A 8B 1 ---- Rj --> Ri
:MOV rj, ri is op8=0x8b & rj & ri {
    ri = rj;
}

# MOV Rs, Ri A B7 1 ---- Rs --> Ri
:MOV rs4_4, ri is op8=0xb7 & rs4_4 & ri {
    ri = rs4_4;
}

# MOV Ri, Rs E B3 1 ---- Ri --> Rs
:MOV ri, rs4_4 is op8=0xb3 & rs4_4 & ri {
    rs4_4 = ri;
}

# MOV PS, Ri E 17-1 1 ---- PS --> Ri
:MOV PS, ri is op12=0x171 & ri & PS {
    packProgramStatus();
    ri = PS;
}

# MOV Ri, PS E 07-1 c CCCC Ri --> PS
:MOV ri, PS is op12=0x071 & ri & PS {
    PS = ri;
    unpackProgramStatus();
}

# ====

# JMP @Ri E 97-0 2 ---- Ri --> PC
:JMP @ri is op12=0x970 & ri {
    goto [ri];
}

# JMP:D @Ri E 9F-0 1 ---- Ri --> PC
:JMP^":D" @ri is op12=0x9f0 & ri {
    delayslot(1);
    goto [ri];
}

# CALL label12 F D0 2 ---- PC+2-->RP , PC+2+(label12-PC-2)-->PC
:CALL REL_SEXT11 is op5=0x1A & REL_SEXT11 {
    RP = inst_next;
    call REL_SEXT11;
}

# CALL:D label12 F D8 1 ---- PC+4 --> RP, PC+2+(label12-PC-2) --> PC
:CALL^":D" REL_SEXT11 is op5=0x1b & REL_SEXT11 {
    RP = inst_next;
    delayslot(1);
    call REL_SEXT11;
}

# CALL @Ri E 97-1 2 ---- PC+2-->RP ,Ri-->PC
:CALL @ri is op12=0x971 & ri {
    RP = inst_next;
    call [ri];
}

# CALL:D @Ri E 9F-1 1 ---- PC+4 --> RP ,Ri --> PC
:CALL^":D" @ri is op12=0x9f1 & ri {
    RP = inst_next;
    delayslot(1);
    call [ri];
}

# RET E 97-2 2 ---- RP --> PC
:RET is op16=0x9720 {
    return [RP];
}

# RET:D E 9F-2 1 ---- RP --> PC
:RET^":D" is op16=0x9f20 {
    delayslot(1);
    return [RP];
}

# INT #u8 D AC 3+3a ---- SSP-=4,PS --> (SSP),SSP-=4,PC+2 --> (SSP),(TBR+0x3FC-u8x4) --> PC
:INT #u8 is op8=0x1f & u8 {
    local ea:4 = inst_next;
    # Could packProgramStatus() into PS, but letting pcodeop handle that;
    _interrupt_prelude(PS, ea);
    call [((TBR + 0x3FC) - (sext(u8:2) << 2))];
}

# INTE E 9F-3 3+3a ---- SSP-=4,PS --> (SSP),SSP-=4,PC+2 --> (SSP),(TBR+0x3D8) -->PC
:INTE is op16=0x9F30 unimpl # Emulator only

# RETI E 97-3 2+2A CCCC (R15) --> PC,R15-=4,(R15) --> PS,R15-=4
:RETI is op16=0x9730 {
    local tempsp:4 = *:4 SP;
    SP = SP + 4;
    PS = *:4 SP;
    SP = SP + 4;
    unpackProgramStatus();
    return [tempsp];
}

# ====

# BRA label9 D E0 2 ---- PC+2+(label9-PC-2) -->PC
# BNO label9 D E1 1 ---- No branch
# BEQ label9 D E2 2/1 ---- if(Z==1) then PC+2+(label9-PC-2) -->PC
# BNE label9 D E3 2/1 ---- s/Z==0
# BC label9 D E4 2/1 ---- s/C==1
# BNC label9 D E5 2/1 ---- s/C==0
# BN label9 D E6 2/1 ---- s/N==1
# BP label9 D E7 2/1 ---- s/N==0
# BV label9 D E8 2/1 ---- s/V==1
# BNV label9 D E9 2/1 ---- s/V==0
# BLT label9 D EA 2/1 ---- s/V xor N==1
# BGE label9 D EB 2/1 ---- s/V xor N==0
# BLE label9 D EC 2/1 ---- s/(V xor N) or Z==1
# BGT label9 D ED 2/1 ---- s/(V xor N) or Z==0
# BLS label9 D EE 2/1 ---- s/C or Z==1
# BHI label9 D EF 2/1 ---- s/C or Z==0
:B^CC REL is op4=0xE & CC & REL
{
    if (CC != 0) goto REL;
}

:B^CC^":D" REL is op4=0xF & CC & REL
{
    delayslot(1);
    if (CC != 0) goto REL;
}

# special case to improve decompiled code
:BRA REL is op4=0xE & cc=0 & REL {
	goto REL;
}
:BRA^":D" REL is op4=0xF & cc=0 & REL {
    delayslot(1);
    goto REL;
}


# ====

# DMOV @dir10, R13 D 08 b ---- (dir10) --> R13
:DMOV @DIR8_REL, AC is op8=0x08 & DIR8_REL & AC {
    AC = DIR8_REL;
}

# DMOV R13, @dir10 D 18 a ---- R13 --> (dir10)
:DMOV AC, @DIR8_REL is op8=0x18 & DIR8_REL & AC {
    DIR8_REL = AC;
}

# DMOV @dir10, @R13+ D 0C 2a ---- (dir10) --> (R13),R13+=4
:DMOV @DIR8_REL, @AC+ is op8=0x0c & DIR8_REL & AC {
    *:4 AC = DIR8_REL;
    AC = AC + 4;
}

# DMOV @R13+, @dir10 D 1C 2a ---- (R13) --> (dir10),R13+=4
:DMOV AC+, @DIR8_REL is op8=0x1c & DIR8_REL & AC {
    DIR8_REL = *:4 AC;
    AC = AC + 4;
}

# DMOV @dir10, @-R15 D 0B 2a ---- R15-=4,(R15) --> (dir10)
:DMOV @DIR8_REL, @-SP is op8=0x0b & DIR8_REL & SP {
    SP = SP - 4;
    *:4 SP = DIR8_REL;
}

# DMOV @R15+, @dir10 D 1B 2a ---- (R15) --> (dir10),R15+=4
:DMOV @SP+, @DIR8_REL is op8=0x1b & DIR8_REL & SP {
    DIR8_REL = *:4 SP;
    SP = SP + 4;
}

# ====

# DMOVH @dir9, R13 D 09 b ---- (dir9) --> R13
:DMOVH @DIR8H_REL, AC is op8=0x09 & DIR8H_REL & AC {
    AC = zext(DIR8H_REL);
}

# DMOVH R13, @dir9 D 19 a ---- R13 --> (dir9)
:DMOVH AC, @DIR8H_REL is op8=0x19 & DIR8H_REL & AC {
    DIR8H_REL = AC:2;
}

# DMOVH @dir9, @R13+ D 0D 2a ---- (dir9) --> (R13),R13+=2
:DMOVH @DIR8H_REL, @AC+ is op8=0x0d & DIR8H_REL & AC {
    *:2 AC = DIR8H_REL;
    AC = AC + 2;
}

# DMOVH @R13+, @dir9 D 1D 2a ---- (R13) --> (dir9),R13+=2
:DMOVH @AC+, @DIR8H_REL is op8=0x1d & DIR8H_REL & AC {
    DIR8H_REL = *:2 AC;
    AC = AC + 2;
}

# ====

# DMOVB @dir8, R13 D 0A b ---- (dir8) --> R13
:DMOVB @DIR8B_REL, AC is op8=0x0a & DIR8B_REL & AC {
    AC = zext(DIR8B_REL);
}

# DMOVB R13, @dir8 D 1A a ---- R13 --> (dir8)
:DMOVB AC, @DIR8B_REL is op8=0x1a & DIR8B_REL & AC {
    DIR8B_REL = AC:1;
}

# DMOVB @dir8, @R13+ D 0E 2a ---- (dir8) --> (R13),R13++
:DMOVB @DIR8B_REL, @AC+ is op8=0x0e & DIR8B_REL & AC {
    *:1 AC = DIR8B_REL;
    AC = AC + 1;
}

# DMOVB @R13+, @dir8 D 1E 2a ---- (R13) --> (dir8),R13++
:DMOVB AC+, @DIR8B_REL is op8=0x1e & DIR8B_REL & AC {
    DIR8B_REL = *:1 AC;
    AC = AC + 1;
}

# ====

# LDRES @Ri+, #u4 C BC a ---- (Ri) --> u4 resource, Ri+=4
:LDRES @ri+, #u4 is op8=0xbc & u4 & ri {
    local tmp:4 = u4;
    dma_write_chan(tmp, *:4 ri);
    ri = ri + 4;
}

# STRES #u4, @Ri+ C BD a ---- u4 resource --> (Ri), Ri+=4
:STRES #u4, @ri+ is op8=0xbd & u4 & ri {
    local tmp:4 = u4;
    *:4 ri = dma_read_chan(tmp);
    ri = ri + 4;
}

# ====

@ifndef FR81_EXTENSION

# COPOP #u4, #u8, CRj, CRi E 9F-C 2+a ---- Operation instruction
:COPOP #ccu4, #copcc, crj, cri is op12=0x9fc & ccu4 ; copcc & crj & cri {
    local tmp0:4 = ccu4;
    local tmp1:4 = copcc;
    local tmp2:4 = crj;
    local tmp3:4 = cri;
    copop(tmp0, tmp1, tmp2, tmp3);
}

# COPLD #u4, #u8, Rj, CRi E 9F-D 1+2a ---- Rj --> CRi
:COPLD #ccu4, #copcc, rj, cri is op12=0x9fd & ccu4 ; copcc & rj & cri {
    local tmp0:4 = ccu4;
    local tmp1:4 = copcc;
    local tmp2:4 = cri;
    copld(tmp0, tmp1, rj, tmp2);
}

# COPST #u4, #u8, CRj, Ri E 9F-E 1+2a ---- CRj --> Ri
:COPST #ccu4, #copcc, crj, ri is op12=0x9fe & ccu4 ; copcc & crj & ri {
    local tmp0:4 = ccu4;
    local tmp1:4 = copcc;
    local tmp2:4 = crj;
    ri = copst(tmp0, tmp1, tmp2, ri);
}

# COPSV #u4, #u8, CRj, Ri E 9F-F 1+2a ---- CRj --> Ri
:COPSV #ccu4, #copcc, crj, ri is op12=0x9ff & ccu4 & copcc & crj & ri {
    local tmp0:4 = ccu4;
    local tmp1:4 = copcc;
    local tmp2:4 = crj;
    ri = copsv(tmp0, tmp1, tmp2, ri);
}

@endif # FR81_EXTENSION

# ====

# NOP E 9F-A 1 ---- No change
:NOP is op16=0x9fa0 {
    # There is no NOP SLEIGH operation
    # "unimpl" will break disassembly
    # Empty braces will produce `sleigh` warning
    # This should get treated as a NOP w/o warnings
    local tmp_nop:1 = 0;
    tmp_nop = tmp_nop;
}

# ====

# ANDCCR #u8 D 83 c CCCC CCR and u8 --> CCR
:ANDCCR #u8 is op8=0x83 & u8 {
    S = S & ((0b00100000 & u8:1) != 0);
    I = I & ((0b00010000 & u8:1) != 0);
    N = N & ((0b00001000 & u8:1) != 0);
    Z = Z & ((0b00000100 & u8:1) != 0);
    V = V & ((0b00000010 & u8:1) != 0);
    C = C & ((0b00000001 & u8:1) != 0);
}

# ORCCR #u8 D 93 c CCCC CCR or u8 --> CCR
:ORCCR #u8 is op8=0x93 & u8 {
    S = S | ((0b00100000 & u8:1) != 0);
    I = I | ((0b00010000 & u8:1) != 0);
    N = N | ((0b00001000 & u8:1) != 0);
    Z = Z | ((0b00000100 & u8:1) != 0);
    V = V | ((0b00000010 & u8:1) != 0);
    C = C | ((0b00000001 & u8:1) != 0);
}

# STILM #u8 D 87 1 ---- i8 --> ILM
:STILM #u8 is op8=0x87 & u8 {
    ILM = u8:1 & 0x0f;
}

# ADDSP #s10 D A3 1 ---- R15 += s10
:ADDSP #s8_imm is op8=0xa3 & s8 [ s8_imm = s8 << 2; ] {
    SP = SP + s8_imm;
}

# ====

# EXTSB Ri E 97-8 1 ---- Sign extension 8 --> 32bit
:EXTSB ri is op12=0x978 & ri {
    ri = sext(ri:1);
}

# EXTUB Ri E 97-9 1 ---- Zero extension 8 --> 32bit
:EXTUB ri is op12=0x979 & ri {
    ri = zext(ri:1);
}

# EXTSH Ri E 97-A 1 ---- Sign extension 16 --> 32bit
:EXTSH ri is op12=0x97a & ri {
    ri = sext(ri:2);
}

# EXTUH Ri E 97-B 1 ---- Zero extension 16 --> 32bit
:EXTUH ri is op12=0x97b & ri {
    ri = zext(ri:2);
}

# LDM0 (reglist) D 8C ---- (R15) --> reglist,R15 increment- Load multi R0-R7
:LDM0 (ldm0_list) is op8=0x8c & ldm0_list
{
    build ldm0_list;
}

# LDM1 (reglist) D 8D ---- (R15) --> reglist,R15 increment- Load multi R8-R15
:LDM1 (ldm1_list) is op8=0x8d & ldm1_list
{
    build ldm1_list;
}

# STM0 (reglist) D 8E ---- R15 decrement,reglist --> (R15)- Store multi R0-R7
:STM0 (stm0_list) is op8=0x8e & stm0_list
{
    build stm0_list;
}

# STM1 (reglist) D 8F ---- R15 decrement,reglist --> (R15)- Store multi R8-R15
:STM1 (stm1_list) is op8=0x8f & stm1_list
{
    build stm1_list;
}

# ====

# ENTER #u10 D 0F 1+a ---- R14 --> (R15 - 4),R15 - 4 --> R14,R15 - u10 --> R15
:ENTER #u8_imm is op8=0x0f & u8 [ u8_imm = u8 << 2; ] {
    *:4 (SP - 4) = FP;
    FP = SP - 4;
    SP = SP - u8_imm;
}

# LEAVE E 9F-9 b ---- R14 + 4 --> R15,(R15 - 4) --> R14
:LEAVE is op16=0x9f90 {
    SP = FP + 4;
    FP = *:4 (SP - 4);
}

# ====

# XCHB @Rj, Ri*5 A 8A 2a ---- Ri --> TEMP,(Rj) --> Ri,TEMP --> (Rj)
:XCHB @rj, ri is op8=0x8a & rj & ri {
    local temp:1 = ri:1;
    ri = zext(*:1 rj);
    *:1 rj = temp;
}

